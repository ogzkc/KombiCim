// <auto-generated />
using System;
using Kombicim.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Kombicim.Data.Migrations
{
    [DbContext(typeof(KombicimDataContext))]
    [Migration("20211222183503_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1254_CI_AS")
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Kombicim.Data.Entities.ApiTokenEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Token")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ApiToken", (string)null);
                });

            modelBuilder.Entity("Kombicim.Data.Entities.ApiUserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("AuthTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ApiUser", (string)null);
                });

            modelBuilder.Entity("Kombicim.Data.Entities.CombiLogEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("CombiLog", (string)null);
                });

            modelBuilder.Entity("Kombicim.Data.Entities.CombiStateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<bool>("Value")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("CombiState", (string)null);
                });

            modelBuilder.Entity("Kombicim.Data.Entities.DeviceEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("CenterDeviceId")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Device", (string)null);
                });

            modelBuilder.Entity("Kombicim.Data.Entities.LocationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("Kombicim.Data.Entities.MinTemperatureEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProfileId");

                    b.ToTable("MinTemperature", (string)null);
                });

            modelBuilder.Entity("Kombicim.Data.Entities.ProfileEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Profile", (string)null);
                });

            modelBuilder.Entity("Kombicim.Data.Entities.ProfilePreferenceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("ActiveProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfilePreference", (string)null);
                });

            modelBuilder.Entity("Kombicim.Data.Entities.SettingEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("Setting", (string)null);
                });

            modelBuilder.Entity("Kombicim.Data.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Kombicim.Data.Entities.WeatherEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Humidity")
                        .HasColumnType("float");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Weather", (string)null);
                });

            modelBuilder.Entity("Kombicim.Data.Entities.ApiTokenEntity", b =>
                {
                    b.HasOne("Kombicim.Data.Entities.UserEntity", "User")
                        .WithMany("ApiTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ApiToken_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kombicim.Data.Entities.CombiLogEntity", b =>
                {
                    b.HasOne("Kombicim.Data.Entities.DeviceEntity", "Device")
                        .WithMany("CombiLogs")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_CombiLog_Device");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Kombicim.Data.Entities.CombiStateEntity", b =>
                {
                    b.HasOne("Kombicim.Data.Entities.DeviceEntity", "Device")
                        .WithMany("CombiStates")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_CombiState_Device");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Kombicim.Data.Entities.DeviceEntity", b =>
                {
                    b.HasOne("Kombicim.Data.Entities.UserEntity", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Device_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kombicim.Data.Entities.LocationEntity", b =>
                {
                    b.HasOne("Kombicim.Data.Entities.DeviceEntity", "Device")
                        .WithMany("Locations")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Location_Device");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Kombicim.Data.Entities.MinTemperatureEntity", b =>
                {
                    b.HasOne("Kombicim.Data.Entities.LocationEntity", "Location")
                        .WithMany("MinTemperatures")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_MinTemperature_Location");

                    b.HasOne("Kombicim.Data.Entities.ProfileEntity", "Profile")
                        .WithMany("MinTemperatures")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_MinTemperature_Profile");

                    b.Navigation("Location");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Kombicim.Data.Entities.ProfileEntity", b =>
                {
                    b.HasOne("Kombicim.Data.Entities.UserEntity", "User")
                        .WithMany("Profiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Profile_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kombicim.Data.Entities.ProfilePreferenceEntity", b =>
                {
                    b.HasOne("Kombicim.Data.Entities.DeviceEntity", "Device")
                        .WithMany("ProfilePreferences")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_ProfilePreference_Device");

                    b.HasOne("Kombicim.Data.Entities.ProfileEntity", "Profile")
                        .WithMany("ProfilePreferences")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ProfilePreference_Profile");

                    b.Navigation("Device");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Kombicim.Data.Entities.SettingEntity", b =>
                {
                    b.HasOne("Kombicim.Data.Entities.DeviceEntity", "Device")
                        .WithMany("Settings")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Setting_Device");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Kombicim.Data.Entities.UserEntity", b =>
                {
                    b.HasOne("Kombicim.Data.Entities.DeviceEntity", "Device")
                        .WithMany("Users")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_User_Device");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Kombicim.Data.Entities.WeatherEntity", b =>
                {
                    b.HasOne("Kombicim.Data.Entities.LocationEntity", "Location")
                        .WithMany("Weathers")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("FK_Weather_Location");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Kombicim.Data.Entities.DeviceEntity", b =>
                {
                    b.Navigation("CombiLogs");

                    b.Navigation("CombiStates");

                    b.Navigation("Locations");

                    b.Navigation("ProfilePreferences");

                    b.Navigation("Settings");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Kombicim.Data.Entities.LocationEntity", b =>
                {
                    b.Navigation("MinTemperatures");

                    b.Navigation("Weathers");
                });

            modelBuilder.Entity("Kombicim.Data.Entities.ProfileEntity", b =>
                {
                    b.Navigation("MinTemperatures");

                    b.Navigation("ProfilePreferences");
                });

            modelBuilder.Entity("Kombicim.Data.Entities.UserEntity", b =>
                {
                    b.Navigation("ApiTokens");

                    b.Navigation("Devices");

                    b.Navigation("Profiles");
                });
#pragma warning restore 612, 618
        }
    }
}
